// Code generated by command: go run gen_decode_sse3.go -out decode_sse3_amd64.s. DO NOT EDIT.

#include "textflag.h"

DATA dataByteCount<>+0(SB)/1, $0x04
DATA dataByteCount<>+1(SB)/1, $0x05
DATA dataByteCount<>+2(SB)/1, $0x06
DATA dataByteCount<>+3(SB)/1, $0x07
DATA dataByteCount<>+4(SB)/1, $0x05
DATA dataByteCount<>+5(SB)/1, $0x06
DATA dataByteCount<>+6(SB)/1, $0x07
DATA dataByteCount<>+7(SB)/1, $0x08
DATA dataByteCount<>+8(SB)/1, $0x06
DATA dataByteCount<>+9(SB)/1, $0x07
DATA dataByteCount<>+10(SB)/1, $0x08
DATA dataByteCount<>+11(SB)/1, $0x09
DATA dataByteCount<>+12(SB)/1, $0x07
DATA dataByteCount<>+13(SB)/1, $0x08
DATA dataByteCount<>+14(SB)/1, $0x09
DATA dataByteCount<>+15(SB)/1, $0x0a
DATA dataByteCount<>+16(SB)/1, $0x05
DATA dataByteCount<>+17(SB)/1, $0x06
DATA dataByteCount<>+18(SB)/1, $0x07
DATA dataByteCount<>+19(SB)/1, $0x08
DATA dataByteCount<>+20(SB)/1, $0x06
DATA dataByteCount<>+21(SB)/1, $0x07
DATA dataByteCount<>+22(SB)/1, $0x08
DATA dataByteCount<>+23(SB)/1, $0x09
DATA dataByteCount<>+24(SB)/1, $0x07
DATA dataByteCount<>+25(SB)/1, $0x08
DATA dataByteCount<>+26(SB)/1, $0x09
DATA dataByteCount<>+27(SB)/1, $0x0a
DATA dataByteCount<>+28(SB)/1, $0x08
DATA dataByteCount<>+29(SB)/1, $0x09
DATA dataByteCount<>+30(SB)/1, $0x0a
DATA dataByteCount<>+31(SB)/1, $0x0b
DATA dataByteCount<>+32(SB)/1, $0x06
DATA dataByteCount<>+33(SB)/1, $0x07
DATA dataByteCount<>+34(SB)/1, $0x08
DATA dataByteCount<>+35(SB)/1, $0x09
DATA dataByteCount<>+36(SB)/1, $0x07
DATA dataByteCount<>+37(SB)/1, $0x08
DATA dataByteCount<>+38(SB)/1, $0x09
DATA dataByteCount<>+39(SB)/1, $0x0a
DATA dataByteCount<>+40(SB)/1, $0x08
DATA dataByteCount<>+41(SB)/1, $0x09
DATA dataByteCount<>+42(SB)/1, $0x0a
DATA dataByteCount<>+43(SB)/1, $0x0b
DATA dataByteCount<>+44(SB)/1, $0x09
DATA dataByteCount<>+45(SB)/1, $0x0a
DATA dataByteCount<>+46(SB)/1, $0x0b
DATA dataByteCount<>+47(SB)/1, $0x0c
DATA dataByteCount<>+48(SB)/1, $0x07
DATA dataByteCount<>+49(SB)/1, $0x08
DATA dataByteCount<>+50(SB)/1, $0x09
DATA dataByteCount<>+51(SB)/1, $0x0a
DATA dataByteCount<>+52(SB)/1, $0x08
DATA dataByteCount<>+53(SB)/1, $0x09
DATA dataByteCount<>+54(SB)/1, $0x0a
DATA dataByteCount<>+55(SB)/1, $0x0b
DATA dataByteCount<>+56(SB)/1, $0x09
DATA dataByteCount<>+57(SB)/1, $0x0a
DATA dataByteCount<>+58(SB)/1, $0x0b
DATA dataByteCount<>+59(SB)/1, $0x0c
DATA dataByteCount<>+60(SB)/1, $0x0a
DATA dataByteCount<>+61(SB)/1, $0x0b
DATA dataByteCount<>+62(SB)/1, $0x0c
DATA dataByteCount<>+63(SB)/1, $0x0d
DATA dataByteCount<>+64(SB)/1, $0x05
DATA dataByteCount<>+65(SB)/1, $0x06
DATA dataByteCount<>+66(SB)/1, $0x07
DATA dataByteCount<>+67(SB)/1, $0x08
DATA dataByteCount<>+68(SB)/1, $0x06
DATA dataByteCount<>+69(SB)/1, $0x07
DATA dataByteCount<>+70(SB)/1, $0x08
DATA dataByteCount<>+71(SB)/1, $0x09
DATA dataByteCount<>+72(SB)/1, $0x07
DATA dataByteCount<>+73(SB)/1, $0x08
DATA dataByteCount<>+74(SB)/1, $0x09
DATA dataByteCount<>+75(SB)/1, $0x0a
DATA dataByteCount<>+76(SB)/1, $0x08
DATA dataByteCount<>+77(SB)/1, $0x09
DATA dataByteCount<>+78(SB)/1, $0x0a
DATA dataByteCount<>+79(SB)/1, $0x0b
DATA dataByteCount<>+80(SB)/1, $0x06
DATA dataByteCount<>+81(SB)/1, $0x07
DATA dataByteCount<>+82(SB)/1, $0x08
DATA dataByteCount<>+83(SB)/1, $0x09
DATA dataByteCount<>+84(SB)/1, $0x07
DATA dataByteCount<>+85(SB)/1, $0x08
DATA dataByteCount<>+86(SB)/1, $0x09
DATA dataByteCount<>+87(SB)/1, $0x0a
DATA dataByteCount<>+88(SB)/1, $0x08
DATA dataByteCount<>+89(SB)/1, $0x09
DATA dataByteCount<>+90(SB)/1, $0x0a
DATA dataByteCount<>+91(SB)/1, $0x0b
DATA dataByteCount<>+92(SB)/1, $0x09
DATA dataByteCount<>+93(SB)/1, $0x0a
DATA dataByteCount<>+94(SB)/1, $0x0b
DATA dataByteCount<>+95(SB)/1, $0x0c
DATA dataByteCount<>+96(SB)/1, $0x07
DATA dataByteCount<>+97(SB)/1, $0x08
DATA dataByteCount<>+98(SB)/1, $0x09
DATA dataByteCount<>+99(SB)/1, $0x0a
DATA dataByteCount<>+100(SB)/1, $0x08
DATA dataByteCount<>+101(SB)/1, $0x09
DATA dataByteCount<>+102(SB)/1, $0x0a
DATA dataByteCount<>+103(SB)/1, $0x0b
DATA dataByteCount<>+104(SB)/1, $0x09
DATA dataByteCount<>+105(SB)/1, $0x0a
DATA dataByteCount<>+106(SB)/1, $0x0b
DATA dataByteCount<>+107(SB)/1, $0x0c
DATA dataByteCount<>+108(SB)/1, $0x0a
DATA dataByteCount<>+109(SB)/1, $0x0b
DATA dataByteCount<>+110(SB)/1, $0x0c
DATA dataByteCount<>+111(SB)/1, $0x0d
DATA dataByteCount<>+112(SB)/1, $0x08
DATA dataByteCount<>+113(SB)/1, $0x09
DATA dataByteCount<>+114(SB)/1, $0x0a
DATA dataByteCount<>+115(SB)/1, $0x0b
DATA dataByteCount<>+116(SB)/1, $0x09
DATA dataByteCount<>+117(SB)/1, $0x0a
DATA dataByteCount<>+118(SB)/1, $0x0b
DATA dataByteCount<>+119(SB)/1, $0x0c
DATA dataByteCount<>+120(SB)/1, $0x0a
DATA dataByteCount<>+121(SB)/1, $0x0b
DATA dataByteCount<>+122(SB)/1, $0x0c
DATA dataByteCount<>+123(SB)/1, $0x0d
DATA dataByteCount<>+124(SB)/1, $0x0b
DATA dataByteCount<>+125(SB)/1, $0x0c
DATA dataByteCount<>+126(SB)/1, $0x0d
DATA dataByteCount<>+127(SB)/1, $0x0e
DATA dataByteCount<>+128(SB)/1, $0x06
DATA dataByteCount<>+129(SB)/1, $0x07
DATA dataByteCount<>+130(SB)/1, $0x08
DATA dataByteCount<>+131(SB)/1, $0x09
DATA dataByteCount<>+132(SB)/1, $0x07
DATA dataByteCount<>+133(SB)/1, $0x08
DATA dataByteCount<>+134(SB)/1, $0x09
DATA dataByteCount<>+135(SB)/1, $0x0a
DATA dataByteCount<>+136(SB)/1, $0x08
DATA dataByteCount<>+137(SB)/1, $0x09
DATA dataByteCount<>+138(SB)/1, $0x0a
DATA dataByteCount<>+139(SB)/1, $0x0b
DATA dataByteCount<>+140(SB)/1, $0x09
DATA dataByteCount<>+141(SB)/1, $0x0a
DATA dataByteCount<>+142(SB)/1, $0x0b
DATA dataByteCount<>+143(SB)/1, $0x0c
DATA dataByteCount<>+144(SB)/1, $0x07
DATA dataByteCount<>+145(SB)/1, $0x08
DATA dataByteCount<>+146(SB)/1, $0x09
DATA dataByteCount<>+147(SB)/1, $0x0a
DATA dataByteCount<>+148(SB)/1, $0x08
DATA dataByteCount<>+149(SB)/1, $0x09
DATA dataByteCount<>+150(SB)/1, $0x0a
DATA dataByteCount<>+151(SB)/1, $0x0b
DATA dataByteCount<>+152(SB)/1, $0x09
DATA dataByteCount<>+153(SB)/1, $0x0a
DATA dataByteCount<>+154(SB)/1, $0x0b
DATA dataByteCount<>+155(SB)/1, $0x0c
DATA dataByteCount<>+156(SB)/1, $0x0a
DATA dataByteCount<>+157(SB)/1, $0x0b
DATA dataByteCount<>+158(SB)/1, $0x0c
DATA dataByteCount<>+159(SB)/1, $0x0d
DATA dataByteCount<>+160(SB)/1, $0x08
DATA dataByteCount<>+161(SB)/1, $0x09
DATA dataByteCount<>+162(SB)/1, $0x0a
DATA dataByteCount<>+163(SB)/1, $0x0b
DATA dataByteCount<>+164(SB)/1, $0x09
DATA dataByteCount<>+165(SB)/1, $0x0a
DATA dataByteCount<>+166(SB)/1, $0x0b
DATA dataByteCount<>+167(SB)/1, $0x0c
DATA dataByteCount<>+168(SB)/1, $0x0a
DATA dataByteCount<>+169(SB)/1, $0x0b
DATA dataByteCount<>+170(SB)/1, $0x0c
DATA dataByteCount<>+171(SB)/1, $0x0d
DATA dataByteCount<>+172(SB)/1, $0x0b
DATA dataByteCount<>+173(SB)/1, $0x0c
DATA dataByteCount<>+174(SB)/1, $0x0d
DATA dataByteCount<>+175(SB)/1, $0x0e
DATA dataByteCount<>+176(SB)/1, $0x09
DATA dataByteCount<>+177(SB)/1, $0x0a
DATA dataByteCount<>+178(SB)/1, $0x0b
DATA dataByteCount<>+179(SB)/1, $0x0c
DATA dataByteCount<>+180(SB)/1, $0x0a
DATA dataByteCount<>+181(SB)/1, $0x0b
DATA dataByteCount<>+182(SB)/1, $0x0c
DATA dataByteCount<>+183(SB)/1, $0x0d
DATA dataByteCount<>+184(SB)/1, $0x0b
DATA dataByteCount<>+185(SB)/1, $0x0c
DATA dataByteCount<>+186(SB)/1, $0x0d
DATA dataByteCount<>+187(SB)/1, $0x0e
DATA dataByteCount<>+188(SB)/1, $0x0c
DATA dataByteCount<>+189(SB)/1, $0x0d
DATA dataByteCount<>+190(SB)/1, $0x0e
DATA dataByteCount<>+191(SB)/1, $0x0f
DATA dataByteCount<>+192(SB)/1, $0x07
DATA dataByteCount<>+193(SB)/1, $0x08
DATA dataByteCount<>+194(SB)/1, $0x09
DATA dataByteCount<>+195(SB)/1, $0x0a
DATA dataByteCount<>+196(SB)/1, $0x08
DATA dataByteCount<>+197(SB)/1, $0x09
DATA dataByteCount<>+198(SB)/1, $0x0a
DATA dataByteCount<>+199(SB)/1, $0x0b
DATA dataByteCount<>+200(SB)/1, $0x09
DATA dataByteCount<>+201(SB)/1, $0x0a
DATA dataByteCount<>+202(SB)/1, $0x0b
DATA dataByteCount<>+203(SB)/1, $0x0c
DATA dataByteCount<>+204(SB)/1, $0x0a
DATA dataByteCount<>+205(SB)/1, $0x0b
DATA dataByteCount<>+206(SB)/1, $0x0c
DATA dataByteCount<>+207(SB)/1, $0x0d
DATA dataByteCount<>+208(SB)/1, $0x08
DATA dataByteCount<>+209(SB)/1, $0x09
DATA dataByteCount<>+210(SB)/1, $0x0a
DATA dataByteCount<>+211(SB)/1, $0x0b
DATA dataByteCount<>+212(SB)/1, $0x09
DATA dataByteCount<>+213(SB)/1, $0x0a
DATA dataByteCount<>+214(SB)/1, $0x0b
DATA dataByteCount<>+215(SB)/1, $0x0c
DATA dataByteCount<>+216(SB)/1, $0x0a
DATA dataByteCount<>+217(SB)/1, $0x0b
DATA dataByteCount<>+218(SB)/1, $0x0c
DATA dataByteCount<>+219(SB)/1, $0x0d
DATA dataByteCount<>+220(SB)/1, $0x0b
DATA dataByteCount<>+221(SB)/1, $0x0c
DATA dataByteCount<>+222(SB)/1, $0x0d
DATA dataByteCount<>+223(SB)/1, $0x0e
DATA dataByteCount<>+224(SB)/1, $0x09
DATA dataByteCount<>+225(SB)/1, $0x0a
DATA dataByteCount<>+226(SB)/1, $0x0b
DATA dataByteCount<>+227(SB)/1, $0x0c
DATA dataByteCount<>+228(SB)/1, $0x0a
DATA dataByteCount<>+229(SB)/1, $0x0b
DATA dataByteCount<>+230(SB)/1, $0x0c
DATA dataByteCount<>+231(SB)/1, $0x0d
DATA dataByteCount<>+232(SB)/1, $0x0b
DATA dataByteCount<>+233(SB)/1, $0x0c
DATA dataByteCount<>+234(SB)/1, $0x0d
DATA dataByteCount<>+235(SB)/1, $0x0e
DATA dataByteCount<>+236(SB)/1, $0x0c
DATA dataByteCount<>+237(SB)/1, $0x0d
DATA dataByteCount<>+238(SB)/1, $0x0e
DATA dataByteCount<>+239(SB)/1, $0x0f
DATA dataByteCount<>+240(SB)/1, $0x0a
DATA dataByteCount<>+241(SB)/1, $0x0b
DATA dataByteCount<>+242(SB)/1, $0x0c
DATA dataByteCount<>+243(SB)/1, $0x0d
DATA dataByteCount<>+244(SB)/1, $0x0b
DATA dataByteCount<>+245(SB)/1, $0x0c
DATA dataByteCount<>+246(SB)/1, $0x0d
DATA dataByteCount<>+247(SB)/1, $0x0e
DATA dataByteCount<>+248(SB)/1, $0x0c
DATA dataByteCount<>+249(SB)/1, $0x0d
DATA dataByteCount<>+250(SB)/1, $0x0e
DATA dataByteCount<>+251(SB)/1, $0x0f
DATA dataByteCount<>+252(SB)/1, $0x0d
DATA dataByteCount<>+253(SB)/1, $0x0e
DATA dataByteCount<>+254(SB)/1, $0x0f
DATA dataByteCount<>+255(SB)/1, $0x10
GLOBL dataByteCount<>(SB), RODATA|NOPTR, $256

DATA dataByteMask<>+0(SB)/8, $0xffffff01ffffff00
DATA dataByteMask<>+8(SB)/8, $0xffffff03ffffff02
DATA dataByteMask<>+16(SB)/8, $0xffffff02ffff0100
DATA dataByteMask<>+24(SB)/8, $0xffffff04ffffff03
DATA dataByteMask<>+32(SB)/8, $0xffffff03ff020100
DATA dataByteMask<>+40(SB)/8, $0xffffff05ffffff04
DATA dataByteMask<>+48(SB)/8, $0xffffff0403020100
DATA dataByteMask<>+56(SB)/8, $0xffffff06ffffff05
DATA dataByteMask<>+64(SB)/8, $0xffff0201ffffff00
DATA dataByteMask<>+72(SB)/8, $0xffffff04ffffff03
DATA dataByteMask<>+80(SB)/8, $0xffff0302ffff0100
DATA dataByteMask<>+88(SB)/8, $0xffffff05ffffff04
DATA dataByteMask<>+96(SB)/8, $0xffff0403ff020100
DATA dataByteMask<>+104(SB)/8, $0xffffff06ffffff05
DATA dataByteMask<>+112(SB)/8, $0xffff050403020100
DATA dataByteMask<>+120(SB)/8, $0xffffff07ffffff06
DATA dataByteMask<>+128(SB)/8, $0xff030201ffffff00
DATA dataByteMask<>+136(SB)/8, $0xffffff05ffffff04
DATA dataByteMask<>+144(SB)/8, $0xff040302ffff0100
DATA dataByteMask<>+152(SB)/8, $0xffffff06ffffff05
DATA dataByteMask<>+160(SB)/8, $0xff050403ff020100
DATA dataByteMask<>+168(SB)/8, $0xffffff07ffffff06
DATA dataByteMask<>+176(SB)/8, $0xff06050403020100
DATA dataByteMask<>+184(SB)/8, $0xffffff08ffffff07
DATA dataByteMask<>+192(SB)/8, $0x04030201ffffff00
DATA dataByteMask<>+200(SB)/8, $0xffffff06ffffff05
DATA dataByteMask<>+208(SB)/8, $0x05040302ffff0100
DATA dataByteMask<>+216(SB)/8, $0xffffff07ffffff06
DATA dataByteMask<>+224(SB)/8, $0x06050403ff020100
DATA dataByteMask<>+232(SB)/8, $0xffffff08ffffff07
DATA dataByteMask<>+240(SB)/8, $0x0706050403020100
DATA dataByteMask<>+248(SB)/8, $0xffffff09ffffff08
DATA dataByteMask<>+256(SB)/8, $0xffffff01ffffff00
DATA dataByteMask<>+264(SB)/8, $0xffffff04ffff0302
DATA dataByteMask<>+272(SB)/8, $0xffffff02ffff0100
DATA dataByteMask<>+280(SB)/8, $0xffffff05ffff0403
DATA dataByteMask<>+288(SB)/8, $0xffffff03ff020100
DATA dataByteMask<>+296(SB)/8, $0xffffff06ffff0504
DATA dataByteMask<>+304(SB)/8, $0xffffff0403020100
DATA dataByteMask<>+312(SB)/8, $0xffffff07ffff0605
DATA dataByteMask<>+320(SB)/8, $0xffff0201ffffff00
DATA dataByteMask<>+328(SB)/8, $0xffffff05ffff0403
DATA dataByteMask<>+336(SB)/8, $0xffff0302ffff0100
DATA dataByteMask<>+344(SB)/8, $0xffffff06ffff0504
DATA dataByteMask<>+352(SB)/8, $0xffff0403ff020100
DATA dataByteMask<>+360(SB)/8, $0xffffff07ffff0605
DATA dataByteMask<>+368(SB)/8, $0xffff050403020100
DATA dataByteMask<>+376(SB)/8, $0xffffff08ffff0706
DATA dataByteMask<>+384(SB)/8, $0xff030201ffffff00
DATA dataByteMask<>+392(SB)/8, $0xffffff06ffff0504
DATA dataByteMask<>+400(SB)/8, $0xff040302ffff0100
DATA dataByteMask<>+408(SB)/8, $0xffffff07ffff0605
DATA dataByteMask<>+416(SB)/8, $0xff050403ff020100
DATA dataByteMask<>+424(SB)/8, $0xffffff08ffff0706
DATA dataByteMask<>+432(SB)/8, $0xff06050403020100
DATA dataByteMask<>+440(SB)/8, $0xffffff09ffff0807
DATA dataByteMask<>+448(SB)/8, $0x04030201ffffff00
DATA dataByteMask<>+456(SB)/8, $0xffffff07ffff0605
DATA dataByteMask<>+464(SB)/8, $0x05040302ffff0100
DATA dataByteMask<>+472(SB)/8, $0xffffff08ffff0706
DATA dataByteMask<>+480(SB)/8, $0x06050403ff020100
DATA dataByteMask<>+488(SB)/8, $0xffffff09ffff0807
DATA dataByteMask<>+496(SB)/8, $0x0706050403020100
DATA dataByteMask<>+504(SB)/8, $0xffffff0affff0908
DATA dataByteMask<>+512(SB)/8, $0xffffff01ffffff00
DATA dataByteMask<>+520(SB)/8, $0xffffff05ff040302
DATA dataByteMask<>+528(SB)/8, $0xffffff02ffff0100
DATA dataByteMask<>+536(SB)/8, $0xffffff06ff050403
DATA dataByteMask<>+544(SB)/8, $0xffffff03ff020100
DATA dataByteMask<>+552(SB)/8, $0xffffff07ff060504
DATA dataByteMask<>+560(SB)/8, $0xffffff0403020100
DATA dataByteMask<>+568(SB)/8, $0xffffff08ff070605
DATA dataByteMask<>+576(SB)/8, $0xffff0201ffffff00
DATA dataByteMask<>+584(SB)/8, $0xffffff06ff050403
DATA dataByteMask<>+592(SB)/8, $0xffff0302ffff0100
DATA dataByteMask<>+600(SB)/8, $0xffffff07ff060504
DATA dataByteMask<>+608(SB)/8, $0xffff0403ff020100
DATA dataByteMask<>+616(SB)/8, $0xffffff08ff070605
DATA dataByteMask<>+624(SB)/8, $0xffff050403020100
DATA dataByteMask<>+632(SB)/8, $0xffffff09ff080706
DATA dataByteMask<>+640(SB)/8, $0xff030201ffffff00
DATA dataByteMask<>+648(SB)/8, $0xffffff07ff060504
DATA dataByteMask<>+656(SB)/8, $0xff040302ffff0100
DATA dataByteMask<>+664(SB)/8, $0xffffff08ff070605
DATA dataByteMask<>+672(SB)/8, $0xff050403ff020100
DATA dataByteMask<>+680(SB)/8, $0xffffff09ff080706
DATA dataByteMask<>+688(SB)/8, $0xff06050403020100
DATA dataByteMask<>+696(SB)/8, $0xffffff0aff090807
DATA dataByteMask<>+704(SB)/8, $0x04030201ffffff00
DATA dataByteMask<>+712(SB)/8, $0xffffff08ff070605
DATA dataByteMask<>+720(SB)/8, $0x05040302ffff0100
DATA dataByteMask<>+728(SB)/8, $0xffffff09ff080706
DATA dataByteMask<>+736(SB)/8, $0x06050403ff020100
DATA dataByteMask<>+744(SB)/8, $0xffffff0aff090807
DATA dataByteMask<>+752(SB)/8, $0x0706050403020100
DATA dataByteMask<>+760(SB)/8, $0xffffff0bff0a0908
DATA dataByteMask<>+768(SB)/8, $0xffffff01ffffff00
DATA dataByteMask<>+776(SB)/8, $0xffffff0605040302
DATA dataByteMask<>+784(SB)/8, $0xffffff02ffff0100
DATA dataByteMask<>+792(SB)/8, $0xffffff0706050403
DATA dataByteMask<>+800(SB)/8, $0xffffff03ff020100
DATA dataByteMask<>+808(SB)/8, $0xffffff0807060504
DATA dataByteMask<>+816(SB)/8, $0xffffff0403020100
DATA dataByteMask<>+824(SB)/8, $0xffffff0908070605
DATA dataByteMask<>+832(SB)/8, $0xffff0201ffffff00
DATA dataByteMask<>+840(SB)/8, $0xffffff0706050403
DATA dataByteMask<>+848(SB)/8, $0xffff0302ffff0100
DATA dataByteMask<>+856(SB)/8, $0xffffff0807060504
DATA dataByteMask<>+864(SB)/8, $0xffff0403ff020100
DATA dataByteMask<>+872(SB)/8, $0xffffff0908070605
DATA dataByteMask<>+880(SB)/8, $0xffff050403020100
DATA dataByteMask<>+888(SB)/8, $0xffffff0a09080706
DATA dataByteMask<>+896(SB)/8, $0xff030201ffffff00
DATA dataByteMask<>+904(SB)/8, $0xffffff0807060504
DATA dataByteMask<>+912(SB)/8, $0xff040302ffff0100
DATA dataByteMask<>+920(SB)/8, $0xffffff0908070605
DATA dataByteMask<>+928(SB)/8, $0xff050403ff020100
DATA dataByteMask<>+936(SB)/8, $0xffffff0a09080706
DATA dataByteMask<>+944(SB)/8, $0xff06050403020100
DATA dataByteMask<>+952(SB)/8, $0xffffff0b0a090807
DATA dataByteMask<>+960(SB)/8, $0x04030201ffffff00
DATA dataByteMask<>+968(SB)/8, $0xffffff0908070605
DATA dataByteMask<>+976(SB)/8, $0x05040302ffff0100
DATA dataByteMask<>+984(SB)/8, $0xffffff0a09080706
DATA dataByteMask<>+992(SB)/8, $0x06050403ff020100
DATA dataByteMask<>+1000(SB)/8, $0xffffff0b0a090807
DATA dataByteMask<>+1008(SB)/8, $0x0706050403020100
DATA dataByteMask<>+1016(SB)/8, $0xffffff0c0b0a0908
DATA dataByteMask<>+1024(SB)/8, $0xffffff01ffffff00
DATA dataByteMask<>+1032(SB)/8, $0xffff0403ffffff02
DATA dataByteMask<>+1040(SB)/8, $0xffffff02ffff0100
DATA dataByteMask<>+1048(SB)/8, $0xffff0504ffffff03
DATA dataByteMask<>+1056(SB)/8, $0xffffff03ff020100
DATA dataByteMask<>+1064(SB)/8, $0xffff0605ffffff04
DATA dataByteMask<>+1072(SB)/8, $0xffffff0403020100
DATA dataByteMask<>+1080(SB)/8, $0xffff0706ffffff05
DATA dataByteMask<>+1088(SB)/8, $0xffff0201ffffff00
DATA dataByteMask<>+1096(SB)/8, $0xffff0504ffffff03
DATA dataByteMask<>+1104(SB)/8, $0xffff0302ffff0100
DATA dataByteMask<>+1112(SB)/8, $0xffff0605ffffff04
DATA dataByteMask<>+1120(SB)/8, $0xffff0403ff020100
DATA dataByteMask<>+1128(SB)/8, $0xffff0706ffffff05
DATA dataByteMask<>+1136(SB)/8, $0xffff050403020100
DATA dataByteMask<>+1144(SB)/8, $0xffff0807ffffff06
DATA dataByteMask<>+1152(SB)/8, $0xff030201ffffff00
DATA dataByteMask<>+1160(SB)/8, $0xffff0605ffffff04
DATA dataByteMask<>+1168(SB)/8, $0xff040302ffff0100
DATA dataByteMask<>+1176(SB)/8, $0xffff0706ffffff05
DATA dataByteMask<>+1184(SB)/8, $0xff050403ff020100
DATA dataByteMask<>+1192(SB)/8, $0xffff0807ffffff06
DATA dataByteMask<>+1200(SB)/8, $0xff06050403020100
DATA dataByteMask<>+1208(SB)/8, $0xffff0908ffffff07
DATA dataByteMask<>+1216(SB)/8, $0x04030201ffffff00
DATA dataByteMask<>+1224(SB)/8, $0xffff0706ffffff05
DATA dataByteMask<>+1232(SB)/8, $0x05040302ffff0100
DATA dataByteMask<>+1240(SB)/8, $0xffff0807ffffff06
DATA dataByteMask<>+1248(SB)/8, $0x06050403ff020100
DATA dataByteMask<>+1256(SB)/8, $0xffff0908ffffff07
DATA dataByteMask<>+1264(SB)/8, $0x0706050403020100
DATA dataByteMask<>+1272(SB)/8, $0xffff0a09ffffff08
DATA dataByteMask<>+1280(SB)/8, $0xffffff01ffffff00
DATA dataByteMask<>+1288(SB)/8, $0xffff0504ffff0302
DATA dataByteMask<>+1296(SB)/8, $0xffffff02ffff0100
DATA dataByteMask<>+1304(SB)/8, $0xffff0605ffff0403
DATA dataByteMask<>+1312(SB)/8, $0xffffff03ff020100
DATA dataByteMask<>+1320(SB)/8, $0xffff0706ffff0504
DATA dataByteMask<>+1328(SB)/8, $0xffffff0403020100
DATA dataByteMask<>+1336(SB)/8, $0xffff0807ffff0605
DATA dataByteMask<>+1344(SB)/8, $0xffff0201ffffff00
DATA dataByteMask<>+1352(SB)/8, $0xffff0605ffff0403
DATA dataByteMask<>+1360(SB)/8, $0xffff0302ffff0100
DATA dataByteMask<>+1368(SB)/8, $0xffff0706ffff0504
DATA dataByteMask<>+1376(SB)/8, $0xffff0403ff020100
DATA dataByteMask<>+1384(SB)/8, $0xffff0807ffff0605
DATA dataByteMask<>+1392(SB)/8, $0xffff050403020100
DATA dataByteMask<>+1400(SB)/8, $0xffff0908ffff0706
DATA dataByteMask<>+1408(SB)/8, $0xff030201ffffff00
DATA dataByteMask<>+1416(SB)/8, $0xffff0706ffff0504
DATA dataByteMask<>+1424(SB)/8, $0xff040302ffff0100
DATA dataByteMask<>+1432(SB)/8, $0xffff0807ffff0605
DATA dataByteMask<>+1440(SB)/8, $0xff050403ff020100
DATA dataByteMask<>+1448(SB)/8, $0xffff0908ffff0706
DATA dataByteMask<>+1456(SB)/8, $0xff06050403020100
DATA dataByteMask<>+1464(SB)/8, $0xffff0a09ffff0807
DATA dataByteMask<>+1472(SB)/8, $0x04030201ffffff00
DATA dataByteMask<>+1480(SB)/8, $0xffff0807ffff0605
DATA dataByteMask<>+1488(SB)/8, $0x05040302ffff0100
DATA dataByteMask<>+1496(SB)/8, $0xffff0908ffff0706
DATA dataByteMask<>+1504(SB)/8, $0x06050403ff020100
DATA dataByteMask<>+1512(SB)/8, $0xffff0a09ffff0807
DATA dataByteMask<>+1520(SB)/8, $0x0706050403020100
DATA dataByteMask<>+1528(SB)/8, $0xffff0b0affff0908
DATA dataByteMask<>+1536(SB)/8, $0xffffff01ffffff00
DATA dataByteMask<>+1544(SB)/8, $0xffff0605ff040302
DATA dataByteMask<>+1552(SB)/8, $0xffffff02ffff0100
DATA dataByteMask<>+1560(SB)/8, $0xffff0706ff050403
DATA dataByteMask<>+1568(SB)/8, $0xffffff03ff020100
DATA dataByteMask<>+1576(SB)/8, $0xffff0807ff060504
DATA dataByteMask<>+1584(SB)/8, $0xffffff0403020100
DATA dataByteMask<>+1592(SB)/8, $0xffff0908ff070605
DATA dataByteMask<>+1600(SB)/8, $0xffff0201ffffff00
DATA dataByteMask<>+1608(SB)/8, $0xffff0706ff050403
DATA dataByteMask<>+1616(SB)/8, $0xffff0302ffff0100
DATA dataByteMask<>+1624(SB)/8, $0xffff0807ff060504
DATA dataByteMask<>+1632(SB)/8, $0xffff0403ff020100
DATA dataByteMask<>+1640(SB)/8, $0xffff0908ff070605
DATA dataByteMask<>+1648(SB)/8, $0xffff050403020100
DATA dataByteMask<>+1656(SB)/8, $0xffff0a09ff080706
DATA dataByteMask<>+1664(SB)/8, $0xff030201ffffff00
DATA dataByteMask<>+1672(SB)/8, $0xffff0807ff060504
DATA dataByteMask<>+1680(SB)/8, $0xff040302ffff0100
DATA dataByteMask<>+1688(SB)/8, $0xffff0908ff070605
DATA dataByteMask<>+1696(SB)/8, $0xff050403ff020100
DATA dataByteMask<>+1704(SB)/8, $0xffff0a09ff080706
DATA dataByteMask<>+1712(SB)/8, $0xff06050403020100
DATA dataByteMask<>+1720(SB)/8, $0xffff0b0aff090807
DATA dataByteMask<>+1728(SB)/8, $0x04030201ffffff00
DATA dataByteMask<>+1736(SB)/8, $0xffff0908ff070605
DATA dataByteMask<>+1744(SB)/8, $0x05040302ffff0100
DATA dataByteMask<>+1752(SB)/8, $0xffff0a09ff080706
DATA dataByteMask<>+1760(SB)/8, $0x06050403ff020100
DATA dataByteMask<>+1768(SB)/8, $0xffff0b0aff090807
DATA dataByteMask<>+1776(SB)/8, $0x0706050403020100
DATA dataByteMask<>+1784(SB)/8, $0xffff0c0bff0a0908
DATA dataByteMask<>+1792(SB)/8, $0xffffff01ffffff00
DATA dataByteMask<>+1800(SB)/8, $0xffff070605040302
DATA dataByteMask<>+1808(SB)/8, $0xffffff02ffff0100
DATA dataByteMask<>+1816(SB)/8, $0xffff080706050403
DATA dataByteMask<>+1824(SB)/8, $0xffffff03ff020100
DATA dataByteMask<>+1832(SB)/8, $0xffff090807060504
DATA dataByteMask<>+1840(SB)/8, $0xffffff0403020100
DATA dataByteMask<>+1848(SB)/8, $0xffff0a0908070605
DATA dataByteMask<>+1856(SB)/8, $0xffff0201ffffff00
DATA dataByteMask<>+1864(SB)/8, $0xffff080706050403
DATA dataByteMask<>+1872(SB)/8, $0xffff0302ffff0100
DATA dataByteMask<>+1880(SB)/8, $0xffff090807060504
DATA dataByteMask<>+1888(SB)/8, $0xffff0403ff020100
DATA dataByteMask<>+1896(SB)/8, $0xffff0a0908070605
DATA dataByteMask<>+1904(SB)/8, $0xffff050403020100
DATA dataByteMask<>+1912(SB)/8, $0xffff0b0a09080706
DATA dataByteMask<>+1920(SB)/8, $0xff030201ffffff00
DATA dataByteMask<>+1928(SB)/8, $0xffff090807060504
DATA dataByteMask<>+1936(SB)/8, $0xff040302ffff0100
DATA dataByteMask<>+1944(SB)/8, $0xffff0a0908070605
DATA dataByteMask<>+1952(SB)/8, $0xff050403ff020100
DATA dataByteMask<>+1960(SB)/8, $0xffff0b0a09080706
DATA dataByteMask<>+1968(SB)/8, $0xff06050403020100
DATA dataByteMask<>+1976(SB)/8, $0xffff0c0b0a090807
DATA dataByteMask<>+1984(SB)/8, $0x04030201ffffff00
DATA dataByteMask<>+1992(SB)/8, $0xffff0a0908070605
DATA dataByteMask<>+2000(SB)/8, $0x05040302ffff0100
DATA dataByteMask<>+2008(SB)/8, $0xffff0b0a09080706
DATA dataByteMask<>+2016(SB)/8, $0x06050403ff020100
DATA dataByteMask<>+2024(SB)/8, $0xffff0c0b0a090807
DATA dataByteMask<>+2032(SB)/8, $0x0706050403020100
DATA dataByteMask<>+2040(SB)/8, $0xffff0d0c0b0a0908
DATA dataByteMask<>+2048(SB)/8, $0xffffff01ffffff00
DATA dataByteMask<>+2056(SB)/8, $0xff050403ffffff02
DATA dataByteMask<>+2064(SB)/8, $0xffffff02ffff0100
DATA dataByteMask<>+2072(SB)/8, $0xff060504ffffff03
DATA dataByteMask<>+2080(SB)/8, $0xffffff03ff020100
DATA dataByteMask<>+2088(SB)/8, $0xff070605ffffff04
DATA dataByteMask<>+2096(SB)/8, $0xffffff0403020100
DATA dataByteMask<>+2104(SB)/8, $0xff080706ffffff05
DATA dataByteMask<>+2112(SB)/8, $0xffff0201ffffff00
DATA dataByteMask<>+2120(SB)/8, $0xff060504ffffff03
DATA dataByteMask<>+2128(SB)/8, $0xffff0302ffff0100
DATA dataByteMask<>+2136(SB)/8, $0xff070605ffffff04
DATA dataByteMask<>+2144(SB)/8, $0xffff0403ff020100
DATA dataByteMask<>+2152(SB)/8, $0xff080706ffffff05
DATA dataByteMask<>+2160(SB)/8, $0xffff050403020100
DATA dataByteMask<>+2168(SB)/8, $0xff090807ffffff06
DATA dataByteMask<>+2176(SB)/8, $0xff030201ffffff00
DATA dataByteMask<>+2184(SB)/8, $0xff070605ffffff04
DATA dataByteMask<>+2192(SB)/8, $0xff040302ffff0100
DATA dataByteMask<>+2200(SB)/8, $0xff080706ffffff05
DATA dataByteMask<>+2208(SB)/8, $0xff050403ff020100
DATA dataByteMask<>+2216(SB)/8, $0xff090807ffffff06
DATA dataByteMask<>+2224(SB)/8, $0xff06050403020100
DATA dataByteMask<>+2232(SB)/8, $0xff0a0908ffffff07
DATA dataByteMask<>+2240(SB)/8, $0x04030201ffffff00
DATA dataByteMask<>+2248(SB)/8, $0xff080706ffffff05
DATA dataByteMask<>+2256(SB)/8, $0x05040302ffff0100
DATA dataByteMask<>+2264(SB)/8, $0xff090807ffffff06
DATA dataByteMask<>+2272(SB)/8, $0x06050403ff020100
DATA dataByteMask<>+2280(SB)/8, $0xff0a0908ffffff07
DATA dataByteMask<>+2288(SB)/8, $0x0706050403020100
DATA dataByteMask<>+2296(SB)/8, $0xff0b0a09ffffff08
DATA dataByteMask<>+2304(SB)/8, $0xffffff01ffffff00
DATA dataByteMask<>+2312(SB)/8, $0xff060504ffff0302
DATA dataByteMask<>+2320(SB)/8, $0xffffff02ffff0100
DATA dataByteMask<>+2328(SB)/8, $0xff070605ffff0403
DATA dataByteMask<>+2336(SB)/8, $0xffffff03ff020100
DATA dataByteMask<>+2344(SB)/8, $0xff080706ffff0504
DATA dataByteMask<>+2352(SB)/8, $0xffffff0403020100
DATA dataByteMask<>+2360(SB)/8, $0xff090807ffff0605
DATA dataByteMask<>+2368(SB)/8, $0xffff0201ffffff00
DATA dataByteMask<>+2376(SB)/8, $0xff070605ffff0403
DATA dataByteMask<>+2384(SB)/8, $0xffff0302ffff0100
DATA dataByteMask<>+2392(SB)/8, $0xff080706ffff0504
DATA dataByteMask<>+2400(SB)/8, $0xffff0403ff020100
DATA dataByteMask<>+2408(SB)/8, $0xff090807ffff0605
DATA dataByteMask<>+2416(SB)/8, $0xffff050403020100
DATA dataByteMask<>+2424(SB)/8, $0xff0a0908ffff0706
DATA dataByteMask<>+2432(SB)/8, $0xff030201ffffff00
DATA dataByteMask<>+2440(SB)/8, $0xff080706ffff0504
DATA dataByteMask<>+2448(SB)/8, $0xff040302ffff0100
DATA dataByteMask<>+2456(SB)/8, $0xff090807ffff0605
DATA dataByteMask<>+2464(SB)/8, $0xff050403ff020100
DATA dataByteMask<>+2472(SB)/8, $0xff0a0908ffff0706
DATA dataByteMask<>+2480(SB)/8, $0xff06050403020100
DATA dataByteMask<>+2488(SB)/8, $0xff0b0a09ffff0807
DATA dataByteMask<>+2496(SB)/8, $0x04030201ffffff00
DATA dataByteMask<>+2504(SB)/8, $0xff090807ffff0605
DATA dataByteMask<>+2512(SB)/8, $0x05040302ffff0100
DATA dataByteMask<>+2520(SB)/8, $0xff0a0908ffff0706
DATA dataByteMask<>+2528(SB)/8, $0x06050403ff020100
DATA dataByteMask<>+2536(SB)/8, $0xff0b0a09ffff0807
DATA dataByteMask<>+2544(SB)/8, $0x0706050403020100
DATA dataByteMask<>+2552(SB)/8, $0xff0c0b0affff0908
DATA dataByteMask<>+2560(SB)/8, $0xffffff01ffffff00
DATA dataByteMask<>+2568(SB)/8, $0xff070605ff040302
DATA dataByteMask<>+2576(SB)/8, $0xffffff02ffff0100
DATA dataByteMask<>+2584(SB)/8, $0xff080706ff050403
DATA dataByteMask<>+2592(SB)/8, $0xffffff03ff020100
DATA dataByteMask<>+2600(SB)/8, $0xff090807ff060504
DATA dataByteMask<>+2608(SB)/8, $0xffffff0403020100
DATA dataByteMask<>+2616(SB)/8, $0xff0a0908ff070605
DATA dataByteMask<>+2624(SB)/8, $0xffff0201ffffff00
DATA dataByteMask<>+2632(SB)/8, $0xff080706ff050403
DATA dataByteMask<>+2640(SB)/8, $0xffff0302ffff0100
DATA dataByteMask<>+2648(SB)/8, $0xff090807ff060504
DATA dataByteMask<>+2656(SB)/8, $0xffff0403ff020100
DATA dataByteMask<>+2664(SB)/8, $0xff0a0908ff070605
DATA dataByteMask<>+2672(SB)/8, $0xffff050403020100
DATA dataByteMask<>+2680(SB)/8, $0xff0b0a09ff080706
DATA dataByteMask<>+2688(SB)/8, $0xff030201ffffff00
DATA dataByteMask<>+2696(SB)/8, $0xff090807ff060504
DATA dataByteMask<>+2704(SB)/8, $0xff040302ffff0100
DATA dataByteMask<>+2712(SB)/8, $0xff0a0908ff070605
DATA dataByteMask<>+2720(SB)/8, $0xff050403ff020100
DATA dataByteMask<>+2728(SB)/8, $0xff0b0a09ff080706
DATA dataByteMask<>+2736(SB)/8, $0xff06050403020100
DATA dataByteMask<>+2744(SB)/8, $0xff0c0b0aff090807
DATA dataByteMask<>+2752(SB)/8, $0x04030201ffffff00
DATA dataByteMask<>+2760(SB)/8, $0xff0a0908ff070605
DATA dataByteMask<>+2768(SB)/8, $0x05040302ffff0100
DATA dataByteMask<>+2776(SB)/8, $0xff0b0a09ff080706
DATA dataByteMask<>+2784(SB)/8, $0x06050403ff020100
DATA dataByteMask<>+2792(SB)/8, $0xff0c0b0aff090807
DATA dataByteMask<>+2800(SB)/8, $0x0706050403020100
DATA dataByteMask<>+2808(SB)/8, $0xff0d0c0bff0a0908
DATA dataByteMask<>+2816(SB)/8, $0xffffff01ffffff00
DATA dataByteMask<>+2824(SB)/8, $0xff08070605040302
DATA dataByteMask<>+2832(SB)/8, $0xffffff02ffff0100
DATA dataByteMask<>+2840(SB)/8, $0xff09080706050403
DATA dataByteMask<>+2848(SB)/8, $0xffffff03ff020100
DATA dataByteMask<>+2856(SB)/8, $0xff0a090807060504
DATA dataByteMask<>+2864(SB)/8, $0xffffff0403020100
DATA dataByteMask<>+2872(SB)/8, $0xff0b0a0908070605
DATA dataByteMask<>+2880(SB)/8, $0xffff0201ffffff00
DATA dataByteMask<>+2888(SB)/8, $0xff09080706050403
DATA dataByteMask<>+2896(SB)/8, $0xffff0302ffff0100
DATA dataByteMask<>+2904(SB)/8, $0xff0a090807060504
DATA dataByteMask<>+2912(SB)/8, $0xffff0403ff020100
DATA dataByteMask<>+2920(SB)/8, $0xff0b0a0908070605
DATA dataByteMask<>+2928(SB)/8, $0xffff050403020100
DATA dataByteMask<>+2936(SB)/8, $0xff0c0b0a09080706
DATA dataByteMask<>+2944(SB)/8, $0xff030201ffffff00
DATA dataByteMask<>+2952(SB)/8, $0xff0a090807060504
DATA dataByteMask<>+2960(SB)/8, $0xff040302ffff0100
DATA dataByteMask<>+2968(SB)/8, $0xff0b0a0908070605
DATA dataByteMask<>+2976(SB)/8, $0xff050403ff020100
DATA dataByteMask<>+2984(SB)/8, $0xff0c0b0a09080706
DATA dataByteMask<>+2992(SB)/8, $0xff06050403020100
DATA dataByteMask<>+3000(SB)/8, $0xff0d0c0b0a090807
DATA dataByteMask<>+3008(SB)/8, $0x04030201ffffff00
DATA dataByteMask<>+3016(SB)/8, $0xff0b0a0908070605
DATA dataByteMask<>+3024(SB)/8, $0x05040302ffff0100
DATA dataByteMask<>+3032(SB)/8, $0xff0c0b0a09080706
DATA dataByteMask<>+3040(SB)/8, $0x06050403ff020100
DATA dataByteMask<>+3048(SB)/8, $0xff0d0c0b0a090807
DATA dataByteMask<>+3056(SB)/8, $0x0706050403020100
DATA dataByteMask<>+3064(SB)/8, $0xff0e0d0c0b0a0908
DATA dataByteMask<>+3072(SB)/8, $0xffffff01ffffff00
DATA dataByteMask<>+3080(SB)/8, $0x06050403ffffff02
DATA dataByteMask<>+3088(SB)/8, $0xffffff02ffff0100
DATA dataByteMask<>+3096(SB)/8, $0x07060504ffffff03
DATA dataByteMask<>+3104(SB)/8, $0xffffff03ff020100
DATA dataByteMask<>+3112(SB)/8, $0x08070605ffffff04
DATA dataByteMask<>+3120(SB)/8, $0xffffff0403020100
DATA dataByteMask<>+3128(SB)/8, $0x09080706ffffff05
DATA dataByteMask<>+3136(SB)/8, $0xffff0201ffffff00
DATA dataByteMask<>+3144(SB)/8, $0x07060504ffffff03
DATA dataByteMask<>+3152(SB)/8, $0xffff0302ffff0100
DATA dataByteMask<>+3160(SB)/8, $0x08070605ffffff04
DATA dataByteMask<>+3168(SB)/8, $0xffff0403ff020100
DATA dataByteMask<>+3176(SB)/8, $0x09080706ffffff05
DATA dataByteMask<>+3184(SB)/8, $0xffff050403020100
DATA dataByteMask<>+3192(SB)/8, $0x0a090807ffffff06
DATA dataByteMask<>+3200(SB)/8, $0xff030201ffffff00
DATA dataByteMask<>+3208(SB)/8, $0x08070605ffffff04
DATA dataByteMask<>+3216(SB)/8, $0xff040302ffff0100
DATA dataByteMask<>+3224(SB)/8, $0x09080706ffffff05
DATA dataByteMask<>+3232(SB)/8, $0xff050403ff020100
DATA dataByteMask<>+3240(SB)/8, $0x0a090807ffffff06
DATA dataByteMask<>+3248(SB)/8, $0xff06050403020100
DATA dataByteMask<>+3256(SB)/8, $0x0b0a0908ffffff07
DATA dataByteMask<>+3264(SB)/8, $0x04030201ffffff00
DATA dataByteMask<>+3272(SB)/8, $0x09080706ffffff05
DATA dataByteMask<>+3280(SB)/8, $0x05040302ffff0100
DATA dataByteMask<>+3288(SB)/8, $0x0a090807ffffff06
DATA dataByteMask<>+3296(SB)/8, $0x06050403ff020100
DATA dataByteMask<>+3304(SB)/8, $0x0b0a0908ffffff07
DATA dataByteMask<>+3312(SB)/8, $0x0706050403020100
DATA dataByteMask<>+3320(SB)/8, $0x0c0b0a09ffffff08
DATA dataByteMask<>+3328(SB)/8, $0xffffff01ffffff00
DATA dataByteMask<>+3336(SB)/8, $0x07060504ffff0302
DATA dataByteMask<>+3344(SB)/8, $0xffffff02ffff0100
DATA dataByteMask<>+3352(SB)/8, $0x08070605ffff0403
DATA dataByteMask<>+3360(SB)/8, $0xffffff03ff020100
DATA dataByteMask<>+3368(SB)/8, $0x09080706ffff0504
DATA dataByteMask<>+3376(SB)/8, $0xffffff0403020100
DATA dataByteMask<>+3384(SB)/8, $0x0a090807ffff0605
DATA dataByteMask<>+3392(SB)/8, $0xffff0201ffffff00
DATA dataByteMask<>+3400(SB)/8, $0x08070605ffff0403
DATA dataByteMask<>+3408(SB)/8, $0xffff0302ffff0100
DATA dataByteMask<>+3416(SB)/8, $0x09080706ffff0504
DATA dataByteMask<>+3424(SB)/8, $0xffff0403ff020100
DATA dataByteMask<>+3432(SB)/8, $0x0a090807ffff0605
DATA dataByteMask<>+3440(SB)/8, $0xffff050403020100
DATA dataByteMask<>+3448(SB)/8, $0x0b0a0908ffff0706
DATA dataByteMask<>+3456(SB)/8, $0xff030201ffffff00
DATA dataByteMask<>+3464(SB)/8, $0x09080706ffff0504
DATA dataByteMask<>+3472(SB)/8, $0xff040302ffff0100
DATA dataByteMask<>+3480(SB)/8, $0x0a090807ffff0605
DATA dataByteMask<>+3488(SB)/8, $0xff050403ff020100
DATA dataByteMask<>+3496(SB)/8, $0x0b0a0908ffff0706
DATA dataByteMask<>+3504(SB)/8, $0xff06050403020100
DATA dataByteMask<>+3512(SB)/8, $0x0c0b0a09ffff0807
DATA dataByteMask<>+3520(SB)/8, $0x04030201ffffff00
DATA dataByteMask<>+3528(SB)/8, $0x0a090807ffff0605
DATA dataByteMask<>+3536(SB)/8, $0x05040302ffff0100
DATA dataByteMask<>+3544(SB)/8, $0x0b0a0908ffff0706
DATA dataByteMask<>+3552(SB)/8, $0x06050403ff020100
DATA dataByteMask<>+3560(SB)/8, $0x0c0b0a09ffff0807
DATA dataByteMask<>+3568(SB)/8, $0x0706050403020100
DATA dataByteMask<>+3576(SB)/8, $0x0d0c0b0affff0908
DATA dataByteMask<>+3584(SB)/8, $0xffffff01ffffff00
DATA dataByteMask<>+3592(SB)/8, $0x08070605ff040302
DATA dataByteMask<>+3600(SB)/8, $0xffffff02ffff0100
DATA dataByteMask<>+3608(SB)/8, $0x09080706ff050403
DATA dataByteMask<>+3616(SB)/8, $0xffffff03ff020100
DATA dataByteMask<>+3624(SB)/8, $0x0a090807ff060504
DATA dataByteMask<>+3632(SB)/8, $0xffffff0403020100
DATA dataByteMask<>+3640(SB)/8, $0x0b0a0908ff070605
DATA dataByteMask<>+3648(SB)/8, $0xffff0201ffffff00
DATA dataByteMask<>+3656(SB)/8, $0x09080706ff050403
DATA dataByteMask<>+3664(SB)/8, $0xffff0302ffff0100
DATA dataByteMask<>+3672(SB)/8, $0x0a090807ff060504
DATA dataByteMask<>+3680(SB)/8, $0xffff0403ff020100
DATA dataByteMask<>+3688(SB)/8, $0x0b0a0908ff070605
DATA dataByteMask<>+3696(SB)/8, $0xffff050403020100
DATA dataByteMask<>+3704(SB)/8, $0x0c0b0a09ff080706
DATA dataByteMask<>+3712(SB)/8, $0xff030201ffffff00
DATA dataByteMask<>+3720(SB)/8, $0x0a090807ff060504
DATA dataByteMask<>+3728(SB)/8, $0xff040302ffff0100
DATA dataByteMask<>+3736(SB)/8, $0x0b0a0908ff070605
DATA dataByteMask<>+3744(SB)/8, $0xff050403ff020100
DATA dataByteMask<>+3752(SB)/8, $0x0c0b0a09ff080706
DATA dataByteMask<>+3760(SB)/8, $0xff06050403020100
DATA dataByteMask<>+3768(SB)/8, $0x0d0c0b0aff090807
DATA dataByteMask<>+3776(SB)/8, $0x04030201ffffff00
DATA dataByteMask<>+3784(SB)/8, $0x0b0a0908ff070605
DATA dataByteMask<>+3792(SB)/8, $0x05040302ffff0100
DATA dataByteMask<>+3800(SB)/8, $0x0c0b0a09ff080706
DATA dataByteMask<>+3808(SB)/8, $0x06050403ff020100
DATA dataByteMask<>+3816(SB)/8, $0x0d0c0b0aff090807
DATA dataByteMask<>+3824(SB)/8, $0x0706050403020100
DATA dataByteMask<>+3832(SB)/8, $0x0e0d0c0bff0a0908
DATA dataByteMask<>+3840(SB)/8, $0xffffff01ffffff00
DATA dataByteMask<>+3848(SB)/8, $0x0908070605040302
DATA dataByteMask<>+3856(SB)/8, $0xffffff02ffff0100
DATA dataByteMask<>+3864(SB)/8, $0x0a09080706050403
DATA dataByteMask<>+3872(SB)/8, $0xffffff03ff020100
DATA dataByteMask<>+3880(SB)/8, $0x0b0a090807060504
DATA dataByteMask<>+3888(SB)/8, $0xffffff0403020100
DATA dataByteMask<>+3896(SB)/8, $0x0c0b0a0908070605
DATA dataByteMask<>+3904(SB)/8, $0xffff0201ffffff00
DATA dataByteMask<>+3912(SB)/8, $0x0a09080706050403
DATA dataByteMask<>+3920(SB)/8, $0xffff0302ffff0100
DATA dataByteMask<>+3928(SB)/8, $0x0b0a090807060504
DATA dataByteMask<>+3936(SB)/8, $0xffff0403ff020100
DATA dataByteMask<>+3944(SB)/8, $0x0c0b0a0908070605
DATA dataByteMask<>+3952(SB)/8, $0xffff050403020100
DATA dataByteMask<>+3960(SB)/8, $0x0d0c0b0a09080706
DATA dataByteMask<>+3968(SB)/8, $0xff030201ffffff00
DATA dataByteMask<>+3976(SB)/8, $0x0b0a090807060504
DATA dataByteMask<>+3984(SB)/8, $0xff040302ffff0100
DATA dataByteMask<>+3992(SB)/8, $0x0c0b0a0908070605
DATA dataByteMask<>+4000(SB)/8, $0xff050403ff020100
DATA dataByteMask<>+4008(SB)/8, $0x0d0c0b0a09080706
DATA dataByteMask<>+4016(SB)/8, $0xff06050403020100
DATA dataByteMask<>+4024(SB)/8, $0x0e0d0c0b0a090807
DATA dataByteMask<>+4032(SB)/8, $0x04030201ffffff00
DATA dataByteMask<>+4040(SB)/8, $0x0c0b0a0908070605
DATA dataByteMask<>+4048(SB)/8, $0x05040302ffff0100
DATA dataByteMask<>+4056(SB)/8, $0x0d0c0b0a09080706
DATA dataByteMask<>+4064(SB)/8, $0x06050403ff020100
DATA dataByteMask<>+4072(SB)/8, $0x0e0d0c0b0a090807
DATA dataByteMask<>+4080(SB)/8, $0x0706050403020100
DATA dataByteMask<>+4088(SB)/8, $0x0f0e0d0c0b0a0908
GLOBL dataByteMask<>(SB), RODATA|NOPTR, $4096

// func decodeUint32SSE3(data []uint32, encoded []byte)
// Requires: SSE2, SSSE3
TEXT ·decodeUint32SSE3(SB), NOSPLIT, $0-48
	MOVQ encoded_base+24(FP), AX
	MOVQ encoded_cap+40(FP), CX

	// Revert to scalar processing if we are within 16 bytes of the end.
	SUBQ $0x10, CX
	MOVQ data_base+0(FP), DX
	MOVQ data_len+8(FP), BX

	// Revert to scalar processing if we have less than 4 values to process.
	MOVQ BX, BP
	SUBQ $0x04, BP

	// Initialize the control index.
	XORQ SI, SI

	// Initialize the data index. (len(data) + 3) >> 2
	MOVQ BX, DI
	ADDQ $0x03, DI
	SHRQ $0x02, DI

	// Initialize the output index.
	XORQ R8, R8

	// The byte count lookup table.
	LEAQ dataByteCount<>+0(SB), R9

	// The byte mask lookup table.
	LEAQ dataByteMask<>+0(SB), R10

simd:
	// Check if less than 16 encoded bytes remain and jump to scalar.
	CMPQ DI, CX
	JGT  scalar

	// Check if less than 4 values remain and jump to scalar.
	CMPQ R8, BP
	JGT  scalar

	// Load control byte.
	MOVBQZX (AX)(SI*1), R11
	INCQ    SI

	// Load 16 data bytes into XMM.
	MOVOU (AX)(DI*1), X0

	// Lookup count to increment data index.
	MOVBQZX (R9)(R11*1), R12

	// Lookup the PSHUFB mask.
	SHLQ $0x04, R11

	// Use mask to shuffle the relevant bytes into place.
	PSHUFB (R10)(R11*1), X0

	// Store 4 uint32.
	MOVOU X0, (DX)(R8*4)

	// Increment the indices.
	ADDQ $0x04, R8
	ADDQ R12, DI
	JMP  simd

scalar:
	// Process a single value at a time.
	CMPQ R8, BX
	JE   done

	// Determine if we need to load a new control byte.
	TESTQ $0x00000003, R8
	JNE   loadBytes

	// Load control byte.
	MOVBQZX (AX)(SI*1), R13
	INCQ    SI

loadBytes:
	// Switch on the low two bits of the control byte.
	MOVQ R13, CX
	ANDQ $0x03, CX
	JE   oneByte
	CMPQ CX, $0x01
	JE   twoByte
	CMPQ CX, $0x02
	JE   threeByte
	MOVL (AX)(DI*1), CX
	ADDQ $0x04, DI
	JMP  shiftControl

threeByte:
	MOVWLZX (AX)(DI*1), CX
	MOVBLZX 2(AX)(DI*1), BP
	SHLL    $0x10, BP
	ORL     BP, CX
	ADDQ    $0x03, DI
	JMP     shiftControl

twoByte:
	MOVWLZX (AX)(DI*1), CX
	ADDQ    $0x02, DI
	JMP     shiftControl

oneByte:
	MOVBLZX (AX)(DI*1), CX
	INCQ    DI

shiftControl:
	// Shift control byte to get next value.
	SHRQ $0x02, R13
	MOVL CX, (DX)(R8*4)
	INCQ R8
	JMP  scalar

done:
	RET

// func decodeDeltaUint32SSE3(data []uint32, encoded []byte, previous uint32)
// Requires: SSE2, SSSE3
TEXT ·decodeDeltaUint32SSE3(SB), NOSPLIT, $0-56
	MOVQ encoded_base+24(FP), AX
	MOVQ encoded_cap+40(FP), CX

	// Revert to scalar processing if we are within 16 bytes of the end.
	SUBQ $0x10, CX
	MOVQ data_base+0(FP), DX
	MOVQ data_len+8(FP), BX

	// Revert to scalar processing if we have less than 4 values to process.
	MOVQ BX, BP
	SUBQ $0x04, BP

	// Initialize the control index.
	XORQ SI, SI

	// Initialize the data index. (len(data) + 3) >> 2
	MOVQ BX, DI
	ADDQ $0x03, DI
	SHRQ $0x02, DI

	// Initialize the output index.
	XORQ R8, R8

	// The byte count lookup table.
	LEAQ dataByteCount<>+0(SB), R9

	// The byte mask lookup table.
	LEAQ   dataByteMask<>+0(SB), R10
	MOVL   previous+48(FP), R11
	MOVD   R11, X0
	PSHUFD $0x00, X0, X0

simd:
	// Check if less than 16 encoded bytes remain and jump to scalar.
	CMPQ DI, CX
	JGT  scalar

	// Check if less than 4 values remain and jump to scalar.
	CMPQ R8, BP
	JGT  scalar

	// Load control byte.
	MOVBQZX (AX)(SI*1), R11
	INCQ    SI

	// Load 16 data bytes into XMM.
	MOVOU (AX)(DI*1), X1

	// Lookup count to increment data index.
	MOVBQZX (R9)(R11*1), R12

	// Lookup the PSHUFB mask.
	SHLQ $0x04, R11

	// Use mask to shuffle the relevant bytes into place.
	PSHUFB (R10)(R11*1), X1

	// Calculate prefix sum.
	MOVOU X1, X2

	// (0, 0, delta_0, delta_1)
	PSLLDQ $0x08, X2

	// (delta_0, delta_1, delta_2 + delta_0, delta_3 + delta_1)
	PADDD X2, X1
	MOVOU X1, X2

	// (0, delta_0, delta_1, delta_2 + delta_0)
	PSLLDQ $0x04, X2

	// (delta_0, delta_0 + delta_1, delta_0 + delta_1 + delta_2, delta_0 + delta_1 + delta_2 + delta_delta_3)
	PADDD X2, X1

	// Add the previous last decoded value to all lanes.
	PADDD X0, X1

	// Propagate last decoded value to all lanes of previous.
	PSHUFD $0xff, X1, X0
	MOVD   X0, R11

	// Store 4 uint32.
	MOVOU X1, (DX)(R8*4)

	// Increment the indices.
	ADDQ $0x04, R8
	ADDQ R12, DI
	JMP  simd

scalar:
	// Process a single value at a time.
	CMPQ R8, BX
	JE   done

	// Determine if we need to load a new control byte.
	TESTQ $0x00000003, R8
	JNE   loadBytes

	// Load control byte.
	MOVBQZX (AX)(SI*1), R13
	INCQ    SI

loadBytes:
	// Switch on the low two bits of the control byte.
	MOVQ R13, CX
	ANDQ $0x03, CX
	JE   oneByte
	CMPQ CX, $0x01
	JE   twoByte
	CMPQ CX, $0x02
	JE   threeByte
	MOVL (AX)(DI*1), CX
	ADDQ $0x04, DI
	JMP  shiftControl

threeByte:
	MOVWLZX (AX)(DI*1), CX
	MOVBLZX 2(AX)(DI*1), BP
	SHLL    $0x10, BP
	ORL     BP, CX
	ADDQ    $0x03, DI
	JMP     shiftControl

twoByte:
	MOVWLZX (AX)(DI*1), CX
	ADDQ    $0x02, DI
	JMP     shiftControl

oneByte:
	MOVBLZX (AX)(DI*1), CX
	INCQ    DI

shiftControl:
	// Shift control byte to get next value.
	SHRQ $0x02, R13

	// Add the previous decoded value to the delta.
	ADDL CX, R11
	MOVL R11, (DX)(R8*4)
	INCQ R8
	JMP  scalar

done:
	RET

// func decodeInt32SSE3(data []int32, encoded []byte)
// Requires: SSE2, SSSE3
TEXT ·decodeInt32SSE3(SB), NOSPLIT, $0-48
	MOVQ encoded_base+24(FP), AX
	MOVQ encoded_cap+40(FP), CX

	// Revert to scalar processing if we are within 16 bytes of the end.
	SUBQ $0x10, CX
	MOVQ data_base+0(FP), DX
	MOVQ data_len+8(FP), BX

	// Revert to scalar processing if we have less than 4 values to process.
	MOVQ BX, BP
	SUBQ $0x04, BP

	// Initialize the control index.
	XORQ SI, SI

	// Initialize the data index. (len(data) + 3) >> 2
	MOVQ BX, DI
	ADDQ $0x03, DI
	SHRQ $0x02, DI

	// Initialize the output index.
	XORQ R8, R8

	// The byte count lookup table.
	LEAQ dataByteCount<>+0(SB), R9

	// The byte mask lookup table.
	LEAQ dataByteMask<>+0(SB), R10

simd:
	// Check if less than 16 encoded bytes remain and jump to scalar.
	CMPQ DI, CX
	JGT  scalar

	// Check if less than 4 values remain and jump to scalar.
	CMPQ R8, BP
	JGT  scalar

	// Load control byte.
	MOVBQZX (AX)(SI*1), R11
	INCQ    SI

	// Load 16 data bytes into XMM.
	MOVOU (AX)(DI*1), X0

	// Lookup count to increment data index.
	MOVBQZX (R9)(R11*1), R12

	// Lookup the PSHUFB mask.
	SHLQ $0x04, R11

	// Use mask to shuffle the relevant bytes into place.
	PSHUFB (R10)(R11*1), X0

	// Zigzag decode.
	MOVOU X0, X1

	// (x >> 1)
	PSRLL $0x01, X1

	// Set to all ones.
	PCMPEQL X2, X2

	// Shift to one in each lane.
	PSRLL $0x1f, X2

	// (x & 1)
	PAND X0, X2

	// Set to all zeroes.
	PXOR X0, X0

	// -(x & 1)
	PSUBL X2, X0

	// (x >> 1) ^ - (x & 1)
	PXOR X1, X0

	// Store 4 uint32.
	MOVOU X0, (DX)(R8*4)

	// Increment the indices.
	ADDQ $0x04, R8
	ADDQ R12, DI
	JMP  simd

scalar:
	// Process a single value at a time.
	CMPQ R8, BX
	JE   done

	// Determine if we need to load a new control byte.
	TESTQ $0x00000003, R8
	JNE   loadBytes

	// Load control byte.
	MOVBQZX (AX)(SI*1), R13
	INCQ    SI

loadBytes:
	// Switch on the low two bits of the control byte.
	MOVQ R13, CX
	ANDQ $0x03, CX
	JE   oneByte
	CMPQ CX, $0x01
	JE   twoByte
	CMPQ CX, $0x02
	JE   threeByte
	MOVL (AX)(DI*1), CX
	ADDQ $0x04, DI
	JMP  shiftControl

threeByte:
	MOVWLZX (AX)(DI*1), CX
	MOVBLZX 2(AX)(DI*1), BP
	SHLL    $0x10, BP
	ORL     BP, CX
	ADDQ    $0x03, DI
	JMP     shiftControl

twoByte:
	MOVWLZX (AX)(DI*1), CX
	ADDQ    $0x02, DI
	JMP     shiftControl

oneByte:
	MOVBLZX (AX)(DI*1), CX
	INCQ    DI

shiftControl:
	// Shift control byte to get next value.
	SHRQ $0x02, R13

	// Zigzag decode.
	MOVL CX, BP
	SHRL $0x01, BP
	ANDL $0x01, CX
	NEGL CX
	XORL BP, CX
	MOVL CX, (DX)(R8*4)
	INCQ R8
	JMP  scalar

done:
	RET

// func decodeDeltaInt32SSE3(data []int32, encoded []byte, previous int32)
// Requires: SSE2, SSSE3
TEXT ·decodeDeltaInt32SSE3(SB), NOSPLIT, $0-56
	MOVQ encoded_base+24(FP), AX
	MOVQ encoded_cap+40(FP), CX

	// Revert to scalar processing if we are within 16 bytes of the end.
	SUBQ $0x10, CX
	MOVQ data_base+0(FP), DX
	MOVQ data_len+8(FP), BX

	// Revert to scalar processing if we have less than 4 values to process.
	MOVQ BX, BP
	SUBQ $0x04, BP

	// Initialize the control index.
	XORQ SI, SI

	// Initialize the data index. (len(data) + 3) >> 2
	MOVQ BX, DI
	ADDQ $0x03, DI
	SHRQ $0x02, DI

	// Initialize the output index.
	XORQ R8, R8

	// The byte count lookup table.
	LEAQ dataByteCount<>+0(SB), R9

	// The byte mask lookup table.
	LEAQ   dataByteMask<>+0(SB), R10
	MOVL   previous+48(FP), R11
	MOVD   R11, X0
	PSHUFD $0x00, X0, X0

simd:
	// Check if less than 16 encoded bytes remain and jump to scalar.
	CMPQ DI, CX
	JGT  scalar

	// Check if less than 4 values remain and jump to scalar.
	CMPQ R8, BP
	JGT  scalar

	// Load control byte.
	MOVBQZX (AX)(SI*1), R11
	INCQ    SI

	// Load 16 data bytes into XMM.
	MOVOU (AX)(DI*1), X1

	// Lookup count to increment data index.
	MOVBQZX (R9)(R11*1), R12

	// Lookup the PSHUFB mask.
	SHLQ $0x04, R11

	// Use mask to shuffle the relevant bytes into place.
	PSHUFB (R10)(R11*1), X1

	// Zigzag decode.
	MOVOU X1, X2

	// (x >> 1)
	PSRLL $0x01, X2

	// Set to all ones.
	PCMPEQL X3, X3

	// Shift to one in each lane.
	PSRLL $0x1f, X3

	// (x & 1)
	PAND X1, X3

	// Set to all zeroes.
	PXOR X1, X1

	// -(x & 1)
	PSUBL X3, X1

	// (x >> 1) ^ - (x & 1)
	PXOR X2, X1

	// Calculate prefix sum.
	MOVOU X1, X2

	// (0, 0, delta_0, delta_1)
	PSLLDQ $0x08, X2

	// (delta_0, delta_1, delta_2 + delta_0, delta_3 + delta_1)
	PADDD X2, X1
	MOVOU X1, X2

	// (0, delta_0, delta_1, delta_2 + delta_0)
	PSLLDQ $0x04, X2

	// (delta_0, delta_0 + delta_1, delta_0 + delta_1 + delta_2, delta_0 + delta_1 + delta_2 + delta_delta_3)
	PADDD X2, X1

	// Add the previous last decoded value to all lanes.
	PADDD X0, X1

	// Propagate last decoded value to all lanes of previous.
	PSHUFD $0xff, X1, X0
	MOVD   X0, R11

	// Store 4 uint32.
	MOVOU X1, (DX)(R8*4)

	// Increment the indices.
	ADDQ $0x04, R8
	ADDQ R12, DI
	JMP  simd

scalar:
	// Process a single value at a time.
	CMPQ R8, BX
	JE   done

	// Determine if we need to load a new control byte.
	TESTQ $0x00000003, R8
	JNE   loadBytes

	// Load control byte.
	MOVBQZX (AX)(SI*1), R13
	INCQ    SI

loadBytes:
	// Switch on the low two bits of the control byte.
	MOVQ R13, CX
	ANDQ $0x03, CX
	JE   oneByte
	CMPQ CX, $0x01
	JE   twoByte
	CMPQ CX, $0x02
	JE   threeByte
	MOVL (AX)(DI*1), CX
	ADDQ $0x04, DI
	JMP  shiftControl

threeByte:
	MOVWLZX (AX)(DI*1), CX
	MOVBLZX 2(AX)(DI*1), BP
	SHLL    $0x10, BP
	ORL     BP, CX
	ADDQ    $0x03, DI
	JMP     shiftControl

twoByte:
	MOVWLZX (AX)(DI*1), CX
	ADDQ    $0x02, DI
	JMP     shiftControl

oneByte:
	MOVBLZX (AX)(DI*1), CX
	INCQ    DI

shiftControl:
	// Shift control byte to get next value.
	SHRQ $0x02, R13

	// Zigzag decode.
	MOVL CX, BP
	SHRL $0x01, BP
	ANDL $0x01, CX
	NEGL CX
	XORL BP, CX

	// Add the previous decoded value to the delta.
	ADDL CX, R11
	MOVL R11, (DX)(R8*4)
	INCQ R8
	JMP  scalar

done:
	RET
